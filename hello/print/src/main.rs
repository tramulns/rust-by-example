fn main() {
    // `{}` автоматически будет заменено на
    // аргументы. Они будут преобразованы в строку.
    println!("{} дней", 31);

    // Без суффиксов, 31 является i32. Можно изменить тип 31,
    // используя суффикс.

    // Существует множество способов работы с форматированным выводом. Можно указать
    // позицию для каждого аргумента.
    println!("{0}, это {1}. {1}, это {0}", "Алиса", "Боб");

    // Так же можно именовать аргументы.
    println!(
        "{subject} {verb} {object}",
        object = "ленивую собаку",
        subject = "быстрая коричневая лиса",
        verb = "прыгает через"
    );

    println!(
        "{} из {:b} людей знают, что такое двоичный код, а остальные нет.",
        1, 2
    );

    // Можно выравнивать текст, сдвигая его на указанную ширину.
    // Данный макрос отобразит в консоли
    // "     1". 5 пробелов и "1".
    println!("{number:>width$}", number = 1, width = 6);

    // Можно добавить к цифрам пару нулей. Данный макрос выведет "000001".
    println!("{number:>0width$}", number = 1, width = 6);

    // Компилятор обязательно проверит, что в макрос передано правильное количество
    // аргументов.
    println!("Меня зовут {0}, {1} {0}", "Джеймс", "Бонд");

    // Создаём структуру, которая хранит в себе `i32`. Назовём её `Structure`.
    #[allow(dead_code)]
    #[derive(Debug)]
    struct Structure(i32);

    // Однако, пользовательские типы данных, например, как эта структура
    // требуют более сложной обработки для вывода. Данный код не будет работать.
    println!(
        "Эта структура `{:?}` не хочет выводится на экран...",
        Structure(3)
    );

    println!("Pi is roughly {:.3}", std::f64::consts::PI);
}
